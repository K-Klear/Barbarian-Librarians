go.property("fighter", hash("stick"))
go.property("controls", 1)
go.property("facing", 1)
go.property("state", hash("intro"))

local INPUT = require("mod.input")
local FIGHTER = require("mod.fighters")
local STATE = require("mod.state")
local SET = require("mod.settings")
local SFX = require("mod.sound")

local movement_direction = {
	[-1] = {forward = hash("left"), backward = hash("right")},
	[1] = {forward = hash("right"), backward = hash("left")}
}

local function set_collision(self, collision, reset)
	if self.collision and (reset or not (collision == self.collision)) then
		msg.post("#"..self.collision, "disable")
	end
	if collision then
		msg.post("#"..collision, "enable")
	end
	self.collision = collision
end

local function reset_position(self, time)
	if time then
		set_collision(self, "stand")
		go.animate(".", "euler.z", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, time)
		go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, SET.base_y, go.EASING_LINEAR, time)
	else
		go.cancel_animations(".", "euler.z")
		go.cancel_animations(".", "position.y")
		go.set(".", "euler.z", 0)
		go.set(".", "position.y", SET.base_y)
	end
end

local function play_animation(self, anim, wait_until_finished, rate)
	if not (self.anim == anim) and not (anim == "stand" and self.anim == "wait") then
		self.anim = anim
		if not (anim == "duck_fast") then
			self.anim = anim
		else
			self.anim = "duck"
		end
		local complete_function
		if wait_until_finished then
			self.anim = "wait"
			complete_function = function() self.anim = "jump" end
		end
		sprite.play_flipbook("#sprite", anim, complete_function, {playback_rate = rate or 1})
	end
end

local function check_facing(self)
	if (go.get_world_position().x - go.get_world_position(self.enemy).x) * self.facing > 0 then
		if self.state == hash("ready") then play_animation(self, "turn", true) end
		self.facing = -self.facing
		sprite.set_hflip("#sprite", self.facing < 0)
	end
end

local function update_shadow()
	go.set_position(vmath.vector3(go.get_world_position().x, SET.shadow_y, -0.5), "shadow")
	sprite.set_constant("shadow#sprite", "tint", vmath.vector4(0, 0, 0, SET.shadow_alpha(go.get_world_position().y)))
	go.set_scale(vmath.vector3(SET.shadow_x_scale(go.get(".", "euler.z")), SET.shadow_y_scale, 1), "shadow")
end

function init(self)
	msg.post(".", hash("acquire_input_focus"))
	sprite.set_hflip("#sprite", self.facing < 0)
	for key, val in pairs(FIGHTER[self.fighter].hitbox_list) do
		msg.post("#"..val, "disable")
	end
	set_collision(self, "stand")
	self.actions = {}
	for key, val in pairs(INPUT[self.controls]) do
		self.actions[val] = false
	end
	self.blocked = false
	self.input_history = {}
	self.last_input = STATE.frame
	self.frame_actions = {}
	self.previous_position = go.get_world_position()
	go.set_parent("shadow", nil, true)
	update_shadow()
	play_animation(self, "stand")
end

local function add_action(self, action, frame)
	self.frame_actions[STATE.frame + frame] = self.frame_actions[STATE.frame + frame] or {}
	table.insert(self.frame_actions[STATE.frame + frame], action)
end

local function play_voice_line(sound_set, self, anytime)
	if anytime or not self.talking then
		self.talking = true
		sound.play("/sound#"..FIGHTER[self.fighter].sounds[sound_set][math.random(#FIGHTER[self.fighter].sounds[sound_set])], nil, function() self.talking = false end)
	end
end

function update(self, dt)
	if STATE.unpaused then
		if self.last_input + SET.combo_input_delay < STATE.frame then
			self.input_history = {}
		end
		if self.frame_actions[STATE.frame] then
			for key, val in ipairs(self.frame_actions[STATE.frame]) do
				if val == hash("attack_recovery") then
					if self.state == hash("victor") then
						play_animation(self, "victory")
					else
						reset_position(self, 0.1)
						self.state = hash("ready")
					end
				elseif val == hash("attack_recovery_duck") then
					if self.state == hash("victor") then
						play_animation(self, "victory")
					else
						if self.actions[hash("duck")] then
							play_animation(self, "duck_fast")
							set_collision(self, "duck")
						end
						self.state = hash("ready")
					end
				elseif val == hash("damage_point") then
					local rot = vmath.quat_rotation_z(math.rad(self.move.hitbox_rotation or 0) * self.facing)
					local scale = vmath.vector3(1, 1, 1) * (self.move.hitbox_scale or 1)
					local hitbox = factory.create(self.move.hitbox, vmath.vector3(self.move.damage_pos.x * self.facing, self.move.damage_pos.y, 0), rot, nil, scale)
					msg.post(hitbox, hash("setup"), {myself = go.get_id(), enemy = self.enemy, move = self.move, facing = self.facing})
					local pos = go.get_world_position()
					go.set_position(vmath.vector3(pos.x + (self.move.damage_pos.x * self.facing), pos.y + self.move.damage_pos.y, pos.z), hitbox)
					if self.move.hitbox == "#hitbox_jump" then
						self.hitbox = hitbox
					end
					if self.move.damage_sound then
						play_voice_line(self.move.damage_sound, self, true)
					end
				elseif val == hash("victory_pose") then
					play_animation(self, "victory")
					set_collision(self, "stand")
					go.animate(".", "euler.z", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 0.3)
					go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, SET.base_y, go.EASING_LINEAR, 0.3)
					self.frame_actions = {}
				elseif val == hash("pull_hook") then
					play_animation(self, "hook_pull")
					add_action(self, hash("attack_recovery"), 30)
				elseif val == hash("be_hooked") then
					play_animation(self, "pain_high")
					go.set_position(go.get_world_position(self.enemy) + vmath.vector3(90 * go.get(msg.url(nil, self.enemy, "fighter_control"), hash("facing")), 0, 0))
				elseif val == hash("remove_stun") then
					reset_position(self, 0.3)
					self.state = hash("ready")
				elseif val == hash("bike_ride") then
					self.state = hash("bike")
					set_collision(self, "duck")
					local hitbox = factory.create("#hitbox_bike", go.get_world_position())
					msg.post(hitbox, hash("setup"), {myself = go.get_id(), enemy = self.enemy, move = self.move, facing = self.facing})
					go.set_parent(hitbox, ".", true)
					self.hitbox = hitbox
				elseif val == hash("teleport_start") then
					set_collision(self)
					go.animate("#sprite", "tint.w", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, self.move.duration / 120)
				elseif val == hash("teleport") then
					play_animation(self, "teleport_exit", true)
					go.animate("#sprite", "tint.w", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_LINEAR, self.move.duration / 120)
					local x = go.get_world_position(self.enemy).x - go.get(msg.url(nil, self.enemy, "fighter_control"), hash("facing")) * self.move.distance
					if x < SET.min_x or x > SET.max_x then
						x = go.get_world_position(self.enemy).x + go.get(msg.url(nil, self.enemy, "fighter_control"), hash("facing")) * self.move.distance
					else
						self.facing = -self.facing
						sprite.set_hflip("#sprite", self.facing < 0)
					end
					go.set_position(vmath.vector3(x, SET.base_y, go.get_world_position().z))
				elseif val == hash("teleport_end") then
					self.state = hash("ready")
					set_collision(self, "stand")
				elseif val == hash("quake") then
					msg.post("/cam#camera_script", hash("shake"), {shake = 35})
					if go.get_world_position(self.enemy).y == SET.base_y then
						msg.post(self.enemy, hash("attack_landed"), {move = self.move, pos = go.get_world_position(self.enemy)})
					end
					sound.play("/sound#pe_stomp_01")
				elseif val == hash("teleport_jump_start") then
					set_collision(self, "jump_up")
					msg.post("#"..self.collision, "apply_force", {force = vmath.vector3(0, self.move.jump_force, 0), position = go.get_world_position()})
					self.move.target = go.get_world_position(self.enemy).x
				elseif val == hash("teleport_jump_mid") then
					set_collision(self, "stand")
					local pos = go.get_world_position()
					go.set_position(vmath.vector3(self.move.target, pos.y, pos.z))
					play_animation(self, "teleport_fall")
					set_collision(self, "jump_teleport")
					msg.post("#"..self.collision, "apply_force", {force = vmath.vector3(0, -self.move.jump_force, 0), position = go.get_world_position()})
					local scale = vmath.vector3(1, 1, 1) * self.move.hitbox_scale
					self.hitbox = factory.create(self.move.hitbox, self.move.hitbox_pos, nil, nil, scale)
					msg.post(self.hitbox, hash("setup"), {myself = go.get_id(), enemy = self.enemy, move = self.move, facing = self.facing})
					go.set_position(vmath.vector3(self.move.target, pos.y, pos.z) + self.move.hitbox_pos, self.hitbox)
				elseif val == hash("jump_away") then
					if self.state == hash("victor") then
						play_animation(self, "victory")
					else
						reset_position(self, 0.1)
						self.state = hash("ready")
						local force_x, force_y, anim = SET.jump_force.x, SET.jump_force.y, "jump"
						local pos = go.get_world_position().x
						local dir = self.facing
						if math.abs(pos - SET.min_x) > math.abs(pos - SET.max_x) then
							dir = -dir
						end
						if dir == 1 then
							force_x = force_x * self.facing
							anim = "jump_front"
							set_collision(self, "jump_rotate")
						else
							force_x = force_x * -self.facing
							anim = "jump_back"
							set_collision(self, "jump_rotate")
						end
						msg.post("#"..self.collision, "apply_force", {force = vmath.vector3(force_x, force_y, 0), position = go.get_world_position()})
						self.state = hash("jump")
						play_animation(self, anim)
					end
				end
			end
		end
		if self.state == hash("ready") then
			check_facing(self)
			if self.actions[hash("jump")] then
				reset_position(self)
				msg.post(".", hash("jump"))
			elseif self.actions[hash("duck")] then
				play_animation(self, "duck")
				set_collision(self, "duck")
			elseif self.actions[movement_direction[self.facing].forward] then
				if not self.blocked then
					local new_pos = go.get_world_position() + vmath.vector3(FIGHTER[self.fighter].speed_forwards * self.facing, 0, 0)
					new_pos.x = math.max(new_pos.x, SET.min_x)
					new_pos.x = math.min(new_pos.x, SET.max_x)
					go.set_position(new_pos)
				end
				play_animation(self, "walk")
				set_collision(self, "stand")
			elseif self.actions[movement_direction[self.facing].backward] then
				local new_pos = go.get_world_position() - vmath.vector3(FIGHTER[self.fighter].speed_backwards * self.facing, 0, 0)
				new_pos.x = math.max(new_pos.x, SET.min_x)
				new_pos.x = math.min(new_pos.x, SET.max_x)
				go.set_position(new_pos)
				play_animation(self, "walk_back")
				set_collision(self, "stand")
			else
				play_animation(self, "stand")
				set_collision(self, "stand")
			end
		elseif self.state == hash("ragdoll") and vmath.length_sqr(self.previous_position - go.get_world_position()) < SET.recovery_threshold then
			reset_position(self, SET.recovery_speed)
			play_animation(self, "stand")
			self.state = hash("ready")
		elseif self.state == hash("pain") then
			self.state = hash("ragdoll")
		elseif self.state == hash("bike") then
			local new_pos = go.get_world_position() + vmath.vector3(SET.bike_speed * self.facing, 0, 0)
			if new_pos.x < SET.min_x or new_pos.x > SET.max_x then
				self.state = hash("ready")
				set_collision(self, "stand")
				if self.hitbox then
					msg.post(self.hitbox, hash("die"))
					self.hitbox = nil
				end
			else
				go.set_position(new_pos)
			end
		elseif self.state == hash("pe_jumped") then
			go.set_position(go.get_world_position(self.enemy) + vmath.vector3(0, -190, 0))
		elseif self.state == hash("pe_jumping") and go.get_world_position().y < SET.base_y then
			msg.post("/cam#camera_script", hash("shake"), {shake = 55})
			self.state = hash("none")
			set_collision(self, "stand")
			play_animation(self, "teleport_land")
			add_action(self, hash("jump_away"), self.move.stun_time)
			if self.hitbox then
				msg.post(self.hitbox, hash("die"))
				self.hitbox = nil
			end
			self.move = nil
		end
		if self.paused then
			self.paused = false
		else
			self.previous_position = go.get_world_position()
		end
		self.blocked = false
		
		if math.abs(go.get_world_position().x - go.get_world_position(self.enemy).x) < SET.fighters_min_distance then
			local enemy_state = go.get(msg.url(nil, self.enemy, "fighter_control"), hash("state"))
			if not (enemy_state == hash("jump") or enemy_state == hash("attack") or enemy_state == hash("bike") or enemy_state == hash("pe_jumped")) and
			not(self.state == hash("jump") or self.state == hash("attack") or self.state == hash("bike") or self.state == hash("pe_jumped")) then
				go.set_position(go.get_world_position() + vmath.vector3(10, 0, 0) * -self.facing)
			end
		end
		update_shadow()
	else
		if not self.paused then
			for key, val in pairs(INPUT[self.controls]) do
				self.actions[val] = false
			end
			self.paused = true
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("collision_response") then
		if message.other_group == hash("fighter") then
			self.blocked = true
		end
	elseif message_id == hash("contact_point_response") then
		if message.other_group == hash("ground") and (self.state == hash("jump") or self.state == hash("attack")) then
			if self.move and self.move.name == hash("pe_jump") then
				msg.post("/cam#camera_script", hash("shake"), {shake = 55})
			end
			self.move = nil
			self.state = hash("ready")
			set_collision(self, "stand")
			play_animation(self, "land", true)
			reset_position(self, 0.05)
			if self.hitbox then
				msg.post(self.hitbox, hash("die"))
				self.hitbox = nil
			end
		end
	elseif message_id == hash("attack_landed") then
		if not message.move.hit_sound then
			sound.play("/sound#"..SFX.hit[math.random(#SFX.hit)])
		else
			sound.play("/sound#"..message.move.hit_sound)
		end
		if message.move.damage > SET.sound_pain_threshold then
			play_voice_line("pain_high", self)
		else
			play_voice_line("pain_low", self)
		end
		if message.move.anim == "hook" then
			set_collision(self, "stand")
			self.state = hash("stun")
			play_animation(self, "pain_low")
			reset_position(self)
			go.set_position(go.get_world_position(self.enemy) + vmath.vector3(400 * go.get(msg.url(nil, self.enemy, "fighter_control"), hash("facing")), 100, 0))
			msg.post(self.enemy, hash("hook_landed"))
			self.frame_actions = {}
			add_action(self, hash("be_hooked"), SET.hook_delay)
			add_action(self, hash("remove_stun"), SET.hook_delay + SET.hook_stun)
			msg.post("/main#gui", hash("damage_dealt"), {player = self.controls, amount = message.move.damage})
		elseif message.move.name == hash("pe_jump") then
			set_collision(self)
			self.state = hash("pe_jumped")
			play_animation(self, "pain_high")
			reset_position(self)
			go.set_position(go.get_world_position(self.enemy) + vmath.vector3(0, -150, 0))
			go.set(".", "euler.z", 90)
			msg.post(self.enemy, hash("pe_jump_landed"))
			self.frame_actions = {}
			add_action(self, hash("remove_stun"), message.move.stun_time)
			msg.post("/main#gui", hash("damage_dealt"), {player = self.controls, amount = message.move.damage})
		else
			if message.move.anim == "bike" then
				msg.post(self.enemy, hash("bike_landed"))
			end
			set_collision(self, "ragdoll")
			msg.post("#ragdoll", "apply_force", {force = vmath.vector3(message.move.force.x * go.get(msg.url(nil, self.enemy, "fighter_control"), hash("facing")), message.move.force.y, 0), position = message.pos})
			if not (self.state == hash("dead")) then
				self.state = hash("pain")
				if message.pos.y - go.get_world_position().y > SET.high_pain_threshold then
					play_animation(self, "pain_high")
				else
					play_animation(self, "pain_low")
				end
				self.frame_actions = {}
				msg.post("/main#gui", hash("damage_dealt"), {player = self.controls, amount = message.move.damage})
			end
			if self.hitbox then
				msg.post(self.hitbox, hash("die"))
				self.hitbox = nil
			end
		end
	elseif message_id == hash("hook_landed") then
		self.frame_actions = {}
		self.state = hash("hooking")
		add_action(self, hash("pull_hook"), SET.hook_delay)
		timer.delay(0.3, false, function() play_voice_line("get_over_here", self) end)
	elseif message_id == hash("bike_landed") then
		set_collision(self)
		self.hitbox = nil
	elseif message_id == hash("pe_jump_landed") then
		self.hitbox = nil
		self.state = hash("pe_jumping")
	elseif message_id == hash("attack_pushback") then
		local direction = (self.previous_position.x - go.get_world_position().x) * -self.facing
		local magic_number = SET.jump_force.x / 14400
		local multiplier = (direction + magic_number) / magic_number
		msg.post("#"..self.collision, "apply_force", {force = vmath.vector3(message.move.force.x * -self.facing * multiplier, 0, 0), position = message.pos})
		if self.hitbox then
			msg.post(self.hitbox, hash("die"))
			self.hitbox = nil
		end
	elseif message_id == hash("jump") then
		local force_x, force_y, anim = SET.jump_force.x, SET.jump_force.y, "jump"
		if self.actions[movement_direction[self.facing].forward] then
			force_x = force_x * self.facing
			anim = "jump_front"
			set_collision(self, "jump_rotate")
		elseif self.actions[movement_direction[self.facing].backward] then
			force_x = force_x * -self.facing
			anim = "jump_back"
			set_collision(self, "jump_rotate")
		else
			force_x = 0
			set_collision(self, "jump_up")
		end
		msg.post("#"..self.collision, "apply_force", {force = vmath.vector3(force_x, force_y, 0), position = go.get_world_position()})
		self.state = hash("jump")
		play_animation(self, anim)
	elseif message_id == hash("setup_gos") then
		self.enemy = message.enemy
	elseif message_id == hash("start") then
		self.state = hash("ready")
	elseif message_id == hash("defeat") then
		self.state = hash("dead")
		self.frame_actions = {}
		set_collision(self, "ragdoll")
		msg.post(self.enemy, hash("victory"))
	elseif message_id == hash("victory") then
		if not (self.state == hash("dead")) then
			self.state = hash("victor")
			add_action(self, hash("victory_pose"), 60)
			STATE.victor = self.controls
		end
	elseif message_id == hash("delete_self") then
		go.delete(".", true)
	end
end

local function execute_move(self, move)
	check_facing(self)
	self.state = hash("attack")
	self.move = move
	play_animation(self, move.anim, false, move.playback_rate)
	if move.anim == "uppercut" then	-- WIP
		set_collision(self, "stand")
	elseif move.anim == "bike" then
		add_action(self, hash("bike_ride"), move.bike_ready)
	elseif move.anim == "teleport" then
		add_action(self, hash("teleport_start"), move.start)
		add_action(self, hash("teleport"), move.start + move.duration)
		add_action(self, hash("teleport_end"), 2 * move.start + move.duration)
	elseif move.name == hash("pe_stomp") then
		add_action(self, hash("quake"), move.quake_point)
	elseif move.name == hash("pe_jump") then
		add_action(self, hash("teleport_jump_start"), move.jump_frame)
		add_action(self, hash("teleport_jump_mid"), move.teleport_frame)
	end
	if move.damage_point then
		add_action(self, hash("damage_point"), move.damage_point)
	end
	if move.recovery then
		add_action(self, move.recovery_type, move.recovery)
	end
end

function on_input(self, action_id, action)
	if STATE.unpaused then
		local key_press = INPUT[self.controls][action_id]
		if key_press then
			self.actions[key_press] = action.pressed or not action.released
			if action.pressed then
				local input = key_press
				if input == movement_direction[self.facing].forward then
					input = hash("forward")
				elseif input == movement_direction[self.facing].backward then
					input = hash("backward")
				end
				table.insert(self.input_history, 1, input)
				if #self.input_history > SET.input_history_length then
					table.remove(self.input_history)
				end
				self.last_input = STATE.frame
			end
		end
		if (self.state == hash("ready") or self.state == hash("jump")) and action.pressed then
			for trigger, moves in pairs(FIGHTER[self.fighter].moves) do
				if trigger == key_press then
					for _, move in ipairs(moves) do
						if self.state == move.state then
							local correct_input = true
							for __, val in ipairs(move.keys_held) do
								if not (type(val) == "string" and self.actions[movement_direction[self.facing][val]]) and not (type(val) == "userdata" and self.actions[val]) then
									correct_input = false
								end
							end
							for key, val in ipairs(move.keys_sequence) do
								if not (self.input_history[key] == val) then
									correct_input = false
								end
							end
							if correct_input then
								execute_move(self, move)
								break
							end
						end
					end
					break
				end
			end
		end
	end
end


function final(self)
	go.delete("shadow")
	go.delete()
end
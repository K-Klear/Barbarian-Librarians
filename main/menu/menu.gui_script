local btn, dialog
local COL = {
	default = vmath.vector4(0, 0, 0, 1),
	highlight = vmath.vector4(1, 0.1, 0.15, 1),
	default_img = vmath.vector4(1, 1, 1, 1),
	highlight_img = vmath.vector4(1, 0.5, 0.6, 1),
	default_slider = vmath.vector4(1, 1, 1, 1),
	highlight_slider = vmath.vector4(0.5, 0.8, 0.1, 1)
}
local focus = "intro"
local focus_slider = nil
local focus_button = nil

local STATE = require("mod.state")
local SET = require("mod.settings")
local FIGHTER = require("mod.fighters")
local STR = require("mod.string") 

local function play_music()
	sound.play("#music_theme", nil, play_music)
end

local function set_texts()
	gui.set_text(btn.menu.fight, STR[hash("menu_fight")][SET.lang])
	gui.set_text(btn.menu.settings, STR[hash("menu_settings")][SET.lang])
	gui.set_text(btn.menu.exit, STR[hash("menu_exit")][SET.lang])
	gui.set_text(btn.menu.credits, STR[hash("menu_credits")][SET.lang])
	gui.set_text(btn.settings.close_settings, STR[hash("menu_close")][SET.lang])
	gui.set_text(btn.credits.close_credits, STR[hash("menu_close")][SET.lang])
	gui.set_text(gui.get_node("text_credits"), STR[hash("credits_text")][SET.lang])
	gui.set_text(gui.get_node("text_credits_font_1"), STR[hash("credits_font_1")][SET.lang])
	gui.set_text(gui.get_node("text_credits_font_2"), STR[hash("credits_font_2")][SET.lang])
	gui.set_text(gui.get_node("volume_label"), STR[hash("settings_volume")][SET.lang])
	for key, slider in pairs(slider.settings) do
		gui.set_text(slider.label, STR[hash("settings_volume_labels")][key][SET.lang](SET.volume[key] * 100))
	end
	gui.set_text(gui.get_node("language_label"), STR[hash("language_label")][SET.lang])
end

function init(self)
	sound.set_group_gain("music", SET.volume.music)
	sound.set_group_gain("voice", SET.volume.voice)
	sound.set_group_gain("sound", SET.volume.sound)
	play_music()
	msg.post(".", "acquire_input_focus")
	btn_sequence = {
		menu = {"fight", "settings", "exit", "credits"}
	}
	
	btn = {
		none = {},
		intro = {},
		menu = {
			fight = gui.get_node("btn_fight"),
			settings = gui.get_node("btn_settings"),
			exit = gui.get_node("btn_exit"),
			credits = gui.get_node("btn_credits")
		},
		settings = {
			czech = gui.get_node("flag_cz"),
			english = gui.get_node("flag_uk"),
			close_settings = gui.get_node("btn_close_settings")
		},
		credits = {
			close_credits = gui.get_node("btn_close_credits")
		},
	}
	slider = {
		settings = {
			music = {
				marker = gui.get_node("music_marker"),
				slider = gui.get_node("music_slider"),
				label = gui.get_node("volume_music_label")
			},
			voice = {
				marker = gui.get_node("voice_marker"),
				slider = gui.get_node("voice_slider"),
				label = gui.get_node("volume_voice_label")
			},
			sound = {
				marker = gui.get_node("sfx_marker"),
				slider = gui.get_node("sfx_slider"),
				label = gui.get_node("volume_sfx_label")
			}
		}
	}
	
	dialog = {
		settings = gui.get_node("dialog_settings"),
		credits = gui.get_node("dialog_credits")
	}
	for key, val in pairs(dialog) do
		gui.set_enabled(val, false)
	end
	if STATE.play_intro then
		STATE.play_intro = false
		gui.animate(gui.get_node("title_lib"), "position.x", 640, gui.EASING_OUTCUBIC, 1, 1.5, function()
			if focus == "intro" then
				gui.animate(gui.get_node("title_barb"), "position.x", 640, gui.EASING_OUTELASTIC, 2, 0.5, function()
					if focus == "intro" then
						for key, val in pairs(btn.menu) do
							gui.animate(val, "color.w", 1, gui.EASING_LINEAR, 1, 0, function() focus = "menu" end)
						end
					end
				end)
			end
		end)
	else
		gui.set_position(gui.get_node("title_lib"), vmath.vector3(640, 658, 0))
		gui.set_position(gui.get_node("title_barb"), vmath.vector3(640, 588, 0))
		for key, val in pairs(btn.menu) do
			gui.set_color(val, COL.default)
		end
		focus = "menu"
	end
	set_texts()
end

local function button_pressed(key)
	if key == "fight" then
		msg.post("bootstrap:/go", hash("selection_screen"))
	elseif key == "settings" then
		gui.set_color(btn.menu.settings, COL.default)
		gui.set_enabled(dialog.settings, true)
		gui.set_color(dialog.settings, vmath.vector4(0, 0, 0, 0))
		focus = "none"
		focus_button = nil
		gui.animate(dialog.settings, "color", vmath.vector4(0, 0, 0, 1), gui.EASING_LINEAR, 0.3, 0, function()
			focus = "settings"
		end)
		for key, slider in pairs(slider.settings) do
			gui.set_position(slider.marker, vmath.vector3((SET.volume[key] * 100) - 50, gui.get_position(slider.marker).y, 0))
			gui.set_text(slider.label, STR[hash("settings_volume_labels")][key][SET.lang](SET.volume[key] * 100))
		end
	elseif key == "czech" or key == "english" then
		SET.lang = SET.language_list[key]
		set_texts()
	elseif key == "close_settings" then
		sys.save(sys.get_save_file("Librarian_Barbarians", "settings"), {
			lang = SET.lang, volume = SET.volume
		}) 
		focus = "none"
		focus_button = nil
		gui.set_color(btn.settings.close_settings, COL.default)
		gui.animate(dialog.settings, "color", vmath.vector4(0, 0, 0, 0), gui.EASING_LINEAR, 0.3, 0, function()
			focus = "menu"
			gui.set_enabled(dialog.settings, false)
		end)
	elseif key == "exit" then
		os.exit()
	elseif key == "credits" then
		gui.set_color(btn.menu.credits, COL.default)
		gui.set_enabled(dialog.credits, true)
		gui.set_color(dialog.credits, vmath.vector4(0, 0, 0, 0))
		focus = "none"
		focus_button = nil
		gui.animate(dialog.credits, "color", vmath.vector4(0, 0, 0, 1), gui.EASING_LINEAR, 0.3, 0, function()
			focus = "credits"
		end)
	elseif key == "close_credits" then
		focus = "none"
		focus_button = nil
		gui.set_color(btn.credits.close_credits, COL.default)
		gui.animate(dialog.credits, "color", vmath.vector4(0, 0, 0, 0), gui.EASING_LINEAR, 0.3, 0, function()
			focus = "menu"
			gui.set_enabled(dialog.credits, false)
		end)
	end
end


function on_input(self, action_id, action)
	if focus_slider and action_id == hash("click") and focus == "settings" then
		local slider = slider[focus][focus_slider]
		local pos_x = action.x - gui.get_position(slider.slider).x - gui.get_position(dialog.settings).x
		pos_x = pos_x / 2
		local volume = pos_x + 50
		volume = math.floor((volume + (SET.slider_sensitivity / 2)) / SET.slider_sensitivity) * SET.slider_sensitivity
		volume = math.max(volume, 0)
		volume = math.min(volume, 100)
		gui.set_position(slider.marker, vmath.vector3(volume - 50, gui.get_position(slider.marker).y, 0))
		gui.set_text(slider.label, STR[hash("settings_volume_labels")][focus_slider][SET.lang](volume))
		SET.volume[focus_slider] = volume / 100
		sound.set_group_gain(focus_slider, SET.volume[focus_slider])
		if action.released then
			if focus_slider == "voice" then
				sound.play("#voice_test")
			elseif focus_slider == "sound" then
				sound.play("#sound_test")
			end
		end
	end
	if action_id == hash("click") and action.pressed then
		if focus == "intro" then
			local pos = gui.get_position(gui.get_node("title_lib"))
			gui.set_position(gui.get_node("title_lib"), vmath.vector3(640, pos.y, pos.z))
			pos = gui.get_position(gui.get_node("title_barb"))
			gui.set_position(gui.get_node("title_barb"), vmath.vector3(640, pos.y, pos.z))
			for key, val in pairs(btn.menu) do
				gui.set_color(val, COL.default)
			end
			focus = "menu"
		else
			for key, val in pairs(btn[focus]) do
				if gui.pick_node(val, action.x, action.y) then
					button_pressed(key)
				end
			end
		end
	elseif action.pressed and (action_id == hash("p1_punch") or action_id == hash("p2_punch") or action_id == hash("p1_kick") or action_id == hash("p2_kick")) then
		if focus == "intro" then
			local pos = gui.get_position(gui.get_node("title_lib"))
			gui.set_position(gui.get_node("title_lib"), vmath.vector3(640, pos.y, pos.z))
			pos = gui.get_position(gui.get_node("title_barb"))
			gui.set_position(gui.get_node("title_barb"), vmath.vector3(640, pos.y, pos.z))
			for key, val in pairs(btn.menu) do
				gui.set_color(val, COL.default)
			end
			focus = "menu"
		else
			button_pressed(focus_button)
		end
	elseif action.pressed and (action_id == hash("p1_up") or action_id == hash("p2_up")) then
		if btn_sequence[focus] then
			local key
			for k, v in ipairs(btn_sequence[focus]) do
				if v == focus_button then
					key = k; break
				end
			end
			if not key or not btn_sequence[focus][key - 1] then key = #btn_sequence[focus] + 1 end
			gui.set_color(btn[focus][btn_sequence[focus][key - 1]], COL.highlight)
			if focus_button then gui.set_color(btn[focus][focus_button], COL.default) end
			focus_button = btn_sequence[focus][key - 1]
		end
	elseif action.pressed and (action_id == hash("p1_down") or action_id == hash("p2_down")) then
		if btn_sequence[focus] then
			local key
			for k, v in ipairs(btn_sequence[focus]) do
				if v == focus_button then
					key = k; break
				end
			end
			if not key or not btn_sequence[focus][key + 1] then key = 0 end
			gui.set_color(btn[focus][btn_sequence[focus][key + 1]], COL.highlight)
			if focus_button then gui.set_color(btn[focus][focus_button], COL.default) end
			focus_button = btn_sequence[focus][key + 1]
		end
	elseif not action_id then
		for key, val in pairs(btn[focus]) do
			if gui.pick_node(val, action.x, action.y) then
				focus_button = key
				if gui.get_text(val) then
					gui.set_color(val, COL.highlight)
				else
					gui.set_color(val, COL.highlight_img)
				end
			else
				if gui.get_text(val) then
					gui.set_color(val, COL.default)
				else
					gui.set_color(val, COL.default_img)
				end
				if focus_button == key then
					focus_button = nil
				end
			end
		end
		if slider[focus] then
			for key, val in pairs(slider[focus]) do
				if gui.pick_node(val.slider, action.x, action.y) then
					gui.set_color(val.slider, COL.highlight_slider)
					focus_slider = key
				else
					gui.set_color(val.slider, COL.default_slider)
					if focus_slider == key then
						focus_slider = nil
					end
				end
			end
		end
	end
end

local INPUT = require("mod.input")
local FIGHTER = require("mod.fighters")
local STATE = require("mod.state")
local SET = require("mod.settings")
local STR = require("mod.string")

local COL = {
	default = vmath.vector4(0, 0, 0, 1),
	highlight = vmath.vector4(1, 0.1, 0.15, 1)
}

local icons, reticles, preview
local reticle_pos = {{x = 3, y = 1}, {x = 1, y = 1}}
local reticle_moving = {false, false}
local selection = {false, false}
local locked = {false, false}
local starting = false
local btn

local function change_preview(self, player, fighter)
	if FIGHTER[fighter] then
		gui.set_texture(preview[player], FIGHTER[fighter].atlas)
		gui.play_flipbook(preview[player], "stand")
		selection[player] = fighter
		gui.set_text(name[player], FIGHTER[fighter].name)
	else
		if fighter == hash("random") then
			gui.set_texture(preview[player], "main")
			gui.play_flipbook(preview[player], "unknown_fighter")
			selection[player] = hash("random")
			gui.set_text(name[player], STR[hash("selection_random")][SET.lang])
		else
			gui.set_texture(preview[player], "main")
			gui.play_flipbook(preview[player], "empty_img")
			selection[player] = false
			gui.set_text(name[player], "")
		end
	end
end

local function play_music()
	sound.play("#music", nil, play_music)
end

function init(self)
	play_music()
	msg.post(".", "acquire_input_focus")
	icons = {
		{hash("bohous"), hash("vojta")},
		{hash("random"), hash("empty")},
		{hash("lukas"), hash("michael")}
	}
	btn = {back = gui.get_node("back")}
	reticles = {gui.get_node("reticle_p1"), gui.get_node("reticle_p2")}
	texts = {gui.get_node("text_1"), gui.get_node("text_2")}
	preview = {gui.get_node("preview_player_1"), gui.get_node("preview_player_2")}
	name = {gui.get_node("name_player_1"), gui.get_node("name_player_2")}
	change_preview(self, 1, icons[reticle_pos[1].x][reticle_pos[1].y])
	change_preview(self, 2, icons[reticle_pos[2].x][reticle_pos[2].y])
	gui.set_text(texts[1], STR[hash("selection_player_1")][SET.lang])
	gui.set_text(texts[2], STR[hash("selection_player_2")][SET.lang])
	gui.set_text(gui.get_node("choose_fighter"), STR[hash("selection_choose_fighter")][SET.lang])
	gui.set_text(gui.get_node("back"), STR[hash("selection_exit")][SET.lang])
end

function on_message(self, message_id, message, sender)
	
end

local function check_selection(self)
	if locked[1] and locked[2] and not starting then
		starting = true
		msg.post("bootstrap:/go", hash("start_match"))
	end
end

function on_input(self, action_id, action)
	for player = 1, 2 do
		if INPUT[player][action_id] then
			if not (reticle_moving[player] or locked[player]) then
				if INPUT[player][action_id] == hash("left") then
					if icons[reticle_pos[player].x - 1] and icons[reticle_pos[player].x - 1][reticle_pos[player].y] then
						reticle_pos[player].x = reticle_pos[player].x - 1
						local move = 1
						if icons[reticle_pos[player].x][reticle_pos[player].y] == hash("empty") then
							if icons[reticle_pos[player].x - 1] and icons[reticle_pos[player].x - 1][reticle_pos[player].y] then
								reticle_pos[player].x = reticle_pos[player].x - 1
								move = 2
							else
								move = false
							end
						end
						if move then
							local pos = gui.get_position(reticles[player])
							reticle_moving[player] = true 
							gui.animate(reticles[player], "position.x", pos.x - (130 * move), gui.EASING_LINEAR, 0.2, 0, function() reticle_moving[player] = false end)
							change_preview(self, player, icons[reticle_pos[player].x][reticle_pos[player].y])
						end
					end
				elseif INPUT[player][action_id] == hash("right") then
					if icons[reticle_pos[player].x + 1] and icons[reticle_pos[player].x + 1][reticle_pos[player].y] then
						reticle_pos[player].x = reticle_pos[player].x + 1
						local move = 1
						if icons[reticle_pos[player].x][reticle_pos[player].y] == hash("empty") then
							if icons[reticle_pos[player].x + 1] and icons[reticle_pos[player].x + 1][reticle_pos[player].y] then
								reticle_pos[player].x = reticle_pos[player].x + 1
								move = 2
							else
								move = false
							end
						end
						if move then
							local pos = gui.get_position(reticles[player])
							reticle_moving[player] = true
							gui.animate(reticles[player], "position.x", pos.x + (130 * move), gui.EASING_LINEAR, 0.2, 0, function() reticle_moving[player] = false end)
							change_preview(self, player, icons[reticle_pos[player].x][reticle_pos[player].y])
						end
					end
				elseif INPUT[player][action_id] == hash("duck") then
					if icons[reticle_pos[player].x][reticle_pos[player].y + 1] then
						reticle_pos[player].y = reticle_pos[player].y + 1
						local move = 1
						if icons[reticle_pos[player].x][reticle_pos[player].y] == hash("empty") then
							if icons[reticle_pos[player].x][reticle_pos[player].y + 1] then
								reticle_pos[player].y = reticle_pos[player].y + 1
								move = 2
							else
								reticle_pos[player].y = reticle_pos[player].y - 1
								move = false
							end
						end
						if move then
							local pos = gui.get_position(reticles[player])
							reticle_moving[player] = true
							gui.animate(reticles[player], "position.y", pos.y - (130 * move), gui.EASING_LINEAR, 0.2, 0, function() reticle_moving[player] = false end)
							change_preview(self, player, icons[reticle_pos[player].x][reticle_pos[player].y])
						end
					end
				elseif INPUT[player][action_id] == hash("jump") then
					if icons[reticle_pos[player].x][reticle_pos[player].y - 1] then
						reticle_pos[player].y = reticle_pos[player].y - 1
						local move = 1
						if icons[reticle_pos[player].x][reticle_pos[player].y] == hash("empty") then
							if icons[reticle_pos[player].x][reticle_pos[player].y - 1] then
								reticle_pos[player].y = reticle_pos[player].y - 1
								move = 2
							else
								reticle_pos[player].y = reticle_pos[player].y + 1
								move = false
							end
						end
						if move then
							local pos = gui.get_position(reticles[player])
							reticle_moving[player] = true
							gui.animate(reticles[player], "position.y", pos.y + (130 * move), gui.EASING_LINEAR, 0.2, 0, function() reticle_moving[player] = false end)
							change_preview(self, player, icons[reticle_pos[player].x][reticle_pos[player].y])
						end
					end
				elseif INPUT[player][action_id] == hash("punch") or INPUT[player][action_id] == hash("kick") then
					if selection[player] == hash("random") then
						local list = {}
						for key in pairs(FIGHTER) do
							table.insert(list, key)
						end
						selection[player] = list[math.random(#list)]
						gui.set_texture(preview[player], FIGHTER[selection[player]].atlas)
						gui.set_text(name[player], FIGHTER[selection[player]].name)
					end
					if selection[player] then
						gui.set_color(texts[player], vmath.vector4(0.3, 0.3, 0.3, 1))
						gui.set_color(reticles[player], vmath.vector4(0.3, 0.3, 0.3, 1))
						locked[player] = true
						if locked[1] and locked[2] then
							gui.play_flipbook(preview[player], "victory", check_selection)
						else
							gui.play_flipbook(preview[player], "victory")
						end
						sound.play("#"..FIGHTER[selection[player]].name)
						STATE.fighter[player] = selection[player]
					end
				end
			end
		end
	end
	if action_id == hash("click") and action.pressed then
		if gui.pick_node(btn.back, action.x, action.y) then
			msg.post("bootstrap:/go", hash("back_to_menu"))
		end
	elseif action_id == hash("escape") and action.pressed then
		msg.post("bootstrap:/go", hash("back_to_menu"))
	elseif not action_id then
		if gui.pick_node(btn.back, action.x, action.y) then
			gui.set_color(btn.back, COL.highlight)
		else
			gui.set_color(btn.back, COL.default)
		end
	end
end

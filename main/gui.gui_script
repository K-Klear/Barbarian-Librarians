local STATE = require("mod.state")
local SET = require("mod.settings")
local FIGHTER = require("mod.fighters")
local STR = require("mod.string")
local COL = require("mod.colours")
local node, btn, sliders
local focus_slider, focus_button
local round_in_progress

local other_player = {2, 1}


local function play_music()
	sound.play("/sound#music", nil, play_music)
end

local function start_round(self)
	STATE.frame, STATE.victor = 0
	if STATE.score[1] > 1 or STATE.score[2] > 1 then
		STATE.score = {0, 0}
		msg.post("bootstrap:/go", hash("game_end"))
	else
		for x = 1, 2 do
			for key, val in pairs(self.player_collections[x]) do
				msg.post(val, hash("delete_self"))
			end
		end

		STATE.health = {100, 100}
		
		self.player_collections, self.player_go = {}, {}
		local facing = {-1, 1}
		for x = 1, 2 do
			gui.set_enabled(node[x].win_1, STATE.score[x] > 0)
			gui.set_enabled(node[x].win_2, STATE.score[x] > 1)
			local props = {[hash("/body")] = {fighter = STATE.fighter[x], controls = x, facing = facing[x]}}
			self.player_collections[x] = collectionfactory.create("#"..FIGHTER[STATE.fighter[x]].atlas, vmath.vector3(SET.starting_x[x], SET.base_y, math.random() / 1000), nil, props)
			self.player_go[x] = self.player_collections[x][hash("/body")]
			gui.set_text(node[x].name_label, FIGHTER[STATE.fighter[x]].name)
			gui.set_scale(node[x].hurt_bar, vmath.vector3(0 / 100, 1, 1))
			gui.animate(node[x].health_bar, "scale.x", 1, gui.EASING_INOUTCUBIC, SET.hurt_bar_speed, 0, function() gui.set_scale(node[x].hurt_bar, vmath.vector3(1, 1, 1)) end)
		end

		msg.post(self.player_go[1], hash("setup_gos"), {enemy = self.player_go[2]})
		msg.post(self.player_go[2], hash("setup_gos"), {enemy = self.player_go[1]})

		if STATE.fighter[1] == STATE.fighter[2] then
			sprite.set_constant(msg.url(nil, self.player_go[2], "sprite"), "tint", SET.mirror_tint)
		end

		gui.set_enabled(node.fight, false)
		gui.set_enabled(node.winner, false)
		gui.set_enabled(node.round, true)
		gui.set_text(node.fight, STR[hash("main_fight")][SET.lang])
		local round = (STATE.score[1] + STATE.score[2] + 1)
		gui.set_text(node.round, STR[hash("main_round")][SET.lang](round))

		timer.delay(0.5, false, function()
			sound.play("/sound#round_"..round, nil, function()
				gui.set_enabled(node.round, false)
				gui.set_enabled(node.fight, true)
				msg.post(self.player_go[1], hash("start"))
				msg.post(self.player_go[2], hash("start"))
				round_in_progress = true
				sound.play("sound#fight", nil, function()
					gui.set_enabled(node.fight, false)
				end)
			end)
		end)
	end
end

function init(self)
	local background_list = {"corridor", "court_1", "smoke_break", "hall"}
	sprite.play_flipbook("/background#sprite", (background_list[math.random(#background_list)]))
	self.player_collections = {{}, {}}
	msg.post(".", "acquire_input_focus")
	node = {
		{
			health_bar = gui.get_node("health_p1"),
			name_label = gui.get_node("name_p1"),
			hurt_bar = gui.get_node("hurt_p1"),
			win_1 = gui.get_node("p1_win_1"),
			win_2 = gui.get_node("p1_win_2")
		},
		{
			health_bar = gui.get_node("health_p2"),
			name_label = gui.get_node("name_p2"),
			hurt_bar = gui.get_node("hurt_p2"),
			win_1 = gui.get_node("p2_win_1"),
			win_2 = gui.get_node("p2_win_2")
		},
		round = gui.get_node("round"),
		fight = gui.get_node("fight"),
		winner = gui.get_node("winner"),

		pause_menu = gui.get_node("pause_menu"),
		pause_label = gui.get_node("pause_label")
	}

	btn = {
		czech = gui.get_node("flag_cz"),
		english = gui.get_node("flag_uk"),
		pause = gui.get_node("btn_resume")
	}

	sliders = {
		volume = {
			music = {
				marker = gui.get_node("music_marker"),
				slider = gui.get_node("music_slider"),
				label = gui.get_node("volume_music_label")
			},
			voice = {
				marker = gui.get_node("voice_marker"),
				slider = gui.get_node("voice_slider"),
				label = gui.get_node("volume_voice_label")
			},
			sound = {
				marker = gui.get_node("sfx_marker"),
				slider = gui.get_node("sfx_slider"),
				label = gui.get_node("volume_sfx_label")
			}
		},
		damage = {
			{
				marker = gui.get_node("damage_marker_1"),
				slider = gui.get_node("damage_slider_1"),
				label = gui.get_node("damage_label_1")
			},
			{
				marker = gui.get_node("damage_marker_2"),
				slider = gui.get_node("damage_slider_2"),
				label = gui.get_node("damage_label_2")
			}
		}
	}

	gui.set_enabled(node.pause_menu, false)
	
	play_music()
	start_round(self)
end

local function set_texts()
	gui.set_text(node.pause_label, STR[hash("pause_title")][SET.lang])
	gui.set_text(btn.pause, STR[hash("pause_resume")][SET.lang])
	gui.set_text(gui.get_node("volume_label"), STR[hash("settings_volume")][SET.lang])
	for key, slider in pairs(sliders.volume) do
		gui.set_text(slider.label, STR[hash("settings_volume_labels")][key][SET.lang](SET.volume[key] * 100))
	end
	gui.set_text(gui.get_node("language_label"), STR[hash("language_label")][SET.lang])
	gui.set_text(gui.get_node("damage_label"), STR[hash("settings_damage_multiplier")][SET.lang])
	for key, slider in pairs(sliders.damage) do
		gui.set_text(slider.label, STR[hash("settings_damage_labels")][SET.lang](SET.damage_multiplier[key] * 100, key))
	end
end

local function button_pressed(key)
	if key == "czech" or key == "english" then
		SET.lang = SET.language_list[key]
		set_texts()
	elseif key == "pause" then
		if STATE.unpaused and round_in_progress then
			msg.post("bootstrap:/go", hash("pause"))
			set_texts()
			gui.set_enabled(node.pause_menu, true)
			focus_button = nil; focus_slider = nil
			for key, slider in pairs(sliders.volume) do
				gui.set_position(slider.marker, vmath.vector3((SET.volume[key] * 100) - 50, gui.get_position(slider.marker).y, 0))
				gui.set_text(slider.label, STR[hash("settings_volume_labels")][key][SET.lang](SET.volume[key] * 100))
			end
			for key, slider in pairs(sliders.damage) do
				gui.set_position(slider.marker, vmath.vector3((SET.damage_multiplier[key] * 50) - 50, gui.get_position(slider.marker).y, 0))
				gui.set_text(slider.label, STR[hash("settings_damage_labels")][SET.lang](SET.damage_multiplier[key] * 100, key))
			end
		else
			sys.save(sys.get_save_file("Librarian_Barbarians", "settings"), {
				lang = SET.lang, volume = SET.volume
			}) 
			focus_button = nil; focus_slider = nil
			gui.set_color(btn.pause, COL.default)
			msg.post("bootstrap:/go", hash("unpause"))
			gui.set_enabled(node.pause_menu, false)
		end
	end
end

function on_input(self, action_id, action)
	if focus_slider and action_id == hash("click") then
		local slider, type
		for key, val in pairs(sliders) do
			if val[focus_slider] then
				slider = val[focus_slider]
				type = key
				break
			end
		end
		local pos_x = action.x - gui.get_position(slider.slider).x - gui.get_position(node.pause_menu).x
		pos_x = pos_x / 2
		if type == "volume" then
			local volume = pos_x + 50
			volume = math.floor((volume + (SET.slider_sensitivity / 2)) / SET.slider_sensitivity) * SET.slider_sensitivity
			volume = math.max(volume, 0)
			volume = math.min(volume, 100)
			gui.set_position(slider.marker, vmath.vector3(volume - 50, gui.get_position(slider.marker).y, 0))
			gui.set_text(slider.label, STR[hash("settings_volume_labels")][focus_slider][SET.lang](volume))
			SET.volume[focus_slider] = volume / 100
			sound.set_group_gain(focus_slider, SET.volume[focus_slider])
			if action.released then
				if focus_slider == "voice" then
					--sound.play("/sound#voice_test")
				elseif focus_slider == "sound" then
					--sound.play("/sound#sound_test")
				end
			end
		elseif type == "damage" then
			local damage = pos_x + 50
			damage = math.floor((damage + (SET.slider_sensitivity / 2)) / SET.slider_sensitivity) * SET.slider_sensitivity
			damage = math.max(damage, 0)
			damage = math.min(damage, 100)
			gui.set_position(slider.marker, vmath.vector3(damage - 50, gui.get_position(slider.marker).y, 0))
			SET.damage_multiplier[focus_slider] = damage / 50
			gui.set_text(slider.label, STR[hash("settings_damage_labels")][SET.lang](SET.damage_multiplier[focus_slider] * 100, focus_slider))
		end
	end
	if action_id == hash("debug") and action.pressed then
		msg.post("@system:", "toggle_physics_debug")
	elseif action_id == hash("escape") and action.pressed then
		button_pressed("pause")
	elseif action_id == hash("click") and action.pressed then
		for key, val in pairs(btn) do
			if gui.pick_node(val, action.x, action.y) then
				button_pressed(key)
			end
		end
	elseif not action_id then
		for key, val in pairs(btn) do
			if gui.pick_node(val, action.x, action.y) then
				focus_button = key
				if gui.get_text(val) then
					gui.set_color(val, COL.highlight)
				else
					gui.set_color(val, COL.highlight_img)
				end
			else
				if gui.get_text(val) then
					gui.set_color(val, COL.default)
				else
					gui.set_color(val, COL.default_img)
				end
				if focus_button == key then
					focus_button = nil
				end
			end
		end
		for k, v in pairs(sliders) do
			for key, val in pairs(v) do
				if gui.pick_node(val.slider, action.x, action.y) then
					gui.set_color(val.slider, COL.highlight_slider)
					focus_slider = key
				else
					gui.set_color(val.slider, COL.default_slider)
					if focus_slider == key then
						focus_slider = nil
					end
				end
			end
		end
	end
end

local function end_round(self)
	round_in_progress = false
	if STATE.victor then
		STATE.score[STATE.victor] = STATE.score[STATE.victor] + 1
		gui.set_text(node.winner, STR[hash("main_winner")][SET.lang](FIGHTER[STATE.fighter[STATE.victor]].name))
		gui.set_enabled(node.winner, true)
		sound.play("/sound#"..FIGHTER[STATE.fighter[STATE.victor]].name, nil, function()
			sound.play("sound#wins", nil, function()
				gui.set_enabled(node.winner, false)
				timer.delay(SET.next_round_delay, false, start_round)
			end)
		end)
	else
		gui.set_text(node.winner, STR[hash("main_draw")][SET.lang])
		gui.set_enabled(node.winner, true)
		sound.play("sound#draw", nil, function()
			gui.set_enabled(node.winner, false)
			timer.delay(SET.next_round_delay, false, start_round)
		end)
	end	
end

function on_message(self, message_id, message, sender)
	if message_id == hash("damage_dealt") and STATE.health[message.player] > 0 then
		local new_health = math.max(STATE.health[message.player] - (message.amount * SET.damage_multiplier[other_player[message.player]]), 0)
		STATE.health[message.player] = new_health
		gui.set_scale(node[message.player].health_bar, vmath.vector3(new_health / 100, 1, 1))
		gui.animate(node[message.player].hurt_bar, "scale.x", new_health / 100, gui.EASING_INOUTCUBIC, SET.hurt_bar_speed, SET.hurt_bar_delay)
		if not (new_health > 0) then
			msg.post(sender, hash("defeat"))
			gui.set_enabled(node[other_player[message.player]].win_1, STATE.score[other_player[message.player]] > -1)
			gui.set_enabled(node[other_player[message.player]].win_2, STATE.score[other_player[message.player]] > 0)
			timer.delay(SET.round_end_delay, false, end_round)

			
			if STATE.score[other_player[message.player]] > 1 then

			else

			end
		end
	end
end

function update(self, dt)
	if STATE.unpaused then
		STATE.frame = STATE.frame + 1
	end
end